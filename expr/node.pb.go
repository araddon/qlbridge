// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

/*
Package expr is a generated protocol buffer package.

It is generated from these files:
	node.proto

It has these top-level messages:
	Expr
	NodePb
	BinaryNodePb
	BooleanNodePb
	IncludeNodePb
	UnaryNodePb
	FuncNodePb
	TriNodePb
	ArrayNodePb
	StringNodePb
	IdentityNodePb
	NumberNodePb
	ValueNodePb
	NullNodePb
*/
package expr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Expr an S-Expression https://en.wikipedia.org/wiki/S-expression representation
// of the AST tree of expression.
// EITHER (op,args) OR (one of ident, val) will be present but not both.
type Expr struct {
	Op      string  `protobuf:"bytes,1,opt,name=op" json:"op,omitempty"`
	OpType  int32   `protobuf:"varint,2,opt,name=opType" json:"opType,omitempty"`
	Args    []*Expr `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	Ident   string  `protobuf:"bytes,4,opt,name=ident" json:"ident,omitempty"`
	Val     string  `protobuf:"bytes,5,opt,name=val" json:"val,omitempty"`
	ValType int32   `protobuf:"varint,6,opt,name=valType" json:"valType,omitempty"`
}

func (m *Expr) Reset()                    { *m = Expr{} }
func (m *Expr) String() string            { return proto.CompactTextString(m) }
func (*Expr) ProtoMessage()               {}
func (*Expr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Expr) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *Expr) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

func (m *Expr) GetArgs() []*Expr {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Expr) GetIdent() string {
	if m != nil {
		return m.Ident
	}
	return ""
}

func (m *Expr) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *Expr) GetValType() int32 {
	if m != nil {
		return m.ValType
	}
	return 0
}

// Node expression must be exactly one of these types
type NodePb struct {
	Bn    *BinaryNodePb   `protobuf:"bytes,1,opt,name=bn" json:"bn,omitempty"`
	Booln *BooleanNodePb  `protobuf:"bytes,2,opt,name=booln" json:"booln,omitempty"`
	Un    *UnaryNodePb    `protobuf:"bytes,3,opt,name=un" json:"un,omitempty"`
	Fn    *FuncNodePb     `protobuf:"bytes,4,opt,name=fn" json:"fn,omitempty"`
	Tn    *TriNodePb      `protobuf:"bytes,5,opt,name=tn" json:"tn,omitempty"`
	An    *ArrayNodePb    `protobuf:"bytes,6,opt,name=an" json:"an,omitempty"`
	Nn    *NumberNodePb   `protobuf:"bytes,10,opt,name=nn" json:"nn,omitempty"`
	Vn    *ValueNodePb    `protobuf:"bytes,11,opt,name=vn" json:"vn,omitempty"`
	In    *IdentityNodePb `protobuf:"bytes,12,opt,name=in" json:"in,omitempty"`
	Sn    *StringNodePb   `protobuf:"bytes,13,opt,name=sn" json:"sn,omitempty"`
	Incn  *IncludeNodePb  `protobuf:"bytes,14,opt,name=incn" json:"incn,omitempty"`
	Niln  *NullNodePb     `protobuf:"bytes,15,opt,name=niln" json:"niln,omitempty"`
}

func (m *NodePb) Reset()                    { *m = NodePb{} }
func (m *NodePb) String() string            { return proto.CompactTextString(m) }
func (*NodePb) ProtoMessage()               {}
func (*NodePb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NodePb) GetBn() *BinaryNodePb {
	if m != nil {
		return m.Bn
	}
	return nil
}

func (m *NodePb) GetBooln() *BooleanNodePb {
	if m != nil {
		return m.Booln
	}
	return nil
}

func (m *NodePb) GetUn() *UnaryNodePb {
	if m != nil {
		return m.Un
	}
	return nil
}

func (m *NodePb) GetFn() *FuncNodePb {
	if m != nil {
		return m.Fn
	}
	return nil
}

func (m *NodePb) GetTn() *TriNodePb {
	if m != nil {
		return m.Tn
	}
	return nil
}

func (m *NodePb) GetAn() *ArrayNodePb {
	if m != nil {
		return m.An
	}
	return nil
}

func (m *NodePb) GetNn() *NumberNodePb {
	if m != nil {
		return m.Nn
	}
	return nil
}

func (m *NodePb) GetVn() *ValueNodePb {
	if m != nil {
		return m.Vn
	}
	return nil
}

func (m *NodePb) GetIn() *IdentityNodePb {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *NodePb) GetSn() *StringNodePb {
	if m != nil {
		return m.Sn
	}
	return nil
}

func (m *NodePb) GetIncn() *IncludeNodePb {
	if m != nil {
		return m.Incn
	}
	return nil
}

func (m *NodePb) GetNiln() *NullNodePb {
	if m != nil {
		return m.Niln
	}
	return nil
}

// BinaryNodePb two child args and operation
type BinaryNodePb struct {
	Op    int32     `protobuf:"varint,1,opt,name=op" json:"op,omitempty"`
	Paren bool      `protobuf:"varint,2,opt,name=paren" json:"paren,omitempty"`
	Args  []*NodePb `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
}

func (m *BinaryNodePb) Reset()                    { *m = BinaryNodePb{} }
func (m *BinaryNodePb) String() string            { return proto.CompactTextString(m) }
func (*BinaryNodePb) ProtoMessage()               {}
func (*BinaryNodePb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BinaryNodePb) GetOp() int32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *BinaryNodePb) GetParen() bool {
	if m != nil {
		return m.Paren
	}
	return false
}

func (m *BinaryNodePb) GetArgs() []*NodePb {
	if m != nil {
		return m.Args
	}
	return nil
}

// Boolean Node, n child args
type BooleanNodePb struct {
	Op   int32     `protobuf:"varint,1,opt,name=op" json:"op,omitempty"`
	Args []*NodePb `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
}

func (m *BooleanNodePb) Reset()                    { *m = BooleanNodePb{} }
func (m *BooleanNodePb) String() string            { return proto.CompactTextString(m) }
func (*BooleanNodePb) ProtoMessage()               {}
func (*BooleanNodePb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BooleanNodePb) GetOp() int32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *BooleanNodePb) GetArgs() []*NodePb {
	if m != nil {
		return m.Args
	}
	return nil
}

// Include Node, two child args
type IncludeNodePb struct {
	Op       int32           `protobuf:"varint,1,opt,name=op" json:"op,omitempty"`
	Negated  bool            `protobuf:"varint,2,opt,name=negated" json:"negated,omitempty"`
	Identity *IdentityNodePb `protobuf:"bytes,3,opt,name=identity" json:"identity,omitempty"`
}

func (m *IncludeNodePb) Reset()                    { *m = IncludeNodePb{} }
func (m *IncludeNodePb) String() string            { return proto.CompactTextString(m) }
func (*IncludeNodePb) ProtoMessage()               {}
func (*IncludeNodePb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IncludeNodePb) GetOp() int32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *IncludeNodePb) GetNegated() bool {
	if m != nil {
		return m.Negated
	}
	return false
}

func (m *IncludeNodePb) GetIdentity() *IdentityNodePb {
	if m != nil {
		return m.Identity
	}
	return nil
}

// Unary Node, one child
type UnaryNodePb struct {
	Op    int32   `protobuf:"varint,1,opt,name=op" json:"op,omitempty"`
	Paren bool    `protobuf:"varint,2,opt,name=paren" json:"paren,omitempty"`
	Arg   *NodePb `protobuf:"bytes,3,opt,name=arg" json:"arg,omitempty"`
}

func (m *UnaryNodePb) Reset()                    { *m = UnaryNodePb{} }
func (m *UnaryNodePb) String() string            { return proto.CompactTextString(m) }
func (*UnaryNodePb) ProtoMessage()               {}
func (*UnaryNodePb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UnaryNodePb) GetOp() int32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *UnaryNodePb) GetParen() bool {
	if m != nil {
		return m.Paren
	}
	return false
}

func (m *UnaryNodePb) GetArg() *NodePb {
	if m != nil {
		return m.Arg
	}
	return nil
}

// Func Node, args are children
type FuncNodePb struct {
	Name string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Args []*NodePb `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
}

func (m *FuncNodePb) Reset()                    { *m = FuncNodePb{} }
func (m *FuncNodePb) String() string            { return proto.CompactTextString(m) }
func (*FuncNodePb) ProtoMessage()               {}
func (*FuncNodePb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FuncNodePb) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FuncNodePb) GetArgs() []*NodePb {
	if m != nil {
		return m.Args
	}
	return nil
}

// TriNodePb, may have children
type TriNodePb struct {
	Op   int32     `protobuf:"varint,1,opt,name=op" json:"op,omitempty"`
	Args []*NodePb `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
}

func (m *TriNodePb) Reset()                    { *m = TriNodePb{} }
func (m *TriNodePb) String() string            { return proto.CompactTextString(m) }
func (*TriNodePb) ProtoMessage()               {}
func (*TriNodePb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TriNodePb) GetOp() int32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *TriNodePb) GetArgs() []*NodePb {
	if m != nil {
		return m.Args
	}
	return nil
}

// Array Node
type ArrayNodePb struct {
	Wrap int32     `protobuf:"varint,1,opt,name=wrap" json:"wrap,omitempty"`
	Args []*NodePb `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
}

func (m *ArrayNodePb) Reset()                    { *m = ArrayNodePb{} }
func (m *ArrayNodePb) String() string            { return proto.CompactTextString(m) }
func (*ArrayNodePb) ProtoMessage()               {}
func (*ArrayNodePb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ArrayNodePb) GetWrap() int32 {
	if m != nil {
		return m.Wrap
	}
	return 0
}

func (m *ArrayNodePb) GetArgs() []*NodePb {
	if m != nil {
		return m.Args
	}
	return nil
}

// String literal, no children
type StringNodePb struct {
	Noquote bool   `protobuf:"varint,1,opt,name=noquote" json:"noquote,omitempty"`
	Quote   int32  `protobuf:"varint,2,opt,name=quote" json:"quote,omitempty"`
	Text    string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
}

func (m *StringNodePb) Reset()                    { *m = StringNodePb{} }
func (m *StringNodePb) String() string            { return proto.CompactTextString(m) }
func (*StringNodePb) ProtoMessage()               {}
func (*StringNodePb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StringNodePb) GetNoquote() bool {
	if m != nil {
		return m.Noquote
	}
	return false
}

func (m *StringNodePb) GetQuote() int32 {
	if m != nil {
		return m.Quote
	}
	return 0
}

func (m *StringNodePb) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// Identity
type IdentityNodePb struct {
	Quote int32  `protobuf:"varint,1,opt,name=quote" json:"quote,omitempty"`
	Text  string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
}

func (m *IdentityNodePb) Reset()                    { *m = IdentityNodePb{} }
func (m *IdentityNodePb) String() string            { return proto.CompactTextString(m) }
func (*IdentityNodePb) ProtoMessage()               {}
func (*IdentityNodePb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *IdentityNodePb) GetQuote() int32 {
	if m != nil {
		return m.Quote
	}
	return 0
}

func (m *IdentityNodePb) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// Number Node
type NumberNodePb struct {
	Isint   bool    `protobuf:"varint,1,opt,name=isint" json:"isint,omitempty"`
	Isfloat bool    `protobuf:"varint,2,opt,name=isfloat" json:"isfloat,omitempty"`
	Iv      int64   `protobuf:"varint,3,opt,name=iv" json:"iv,omitempty"`
	Fv      float64 `protobuf:"fixed64,4,opt,name=fv" json:"fv,omitempty"`
	Text    string  `protobuf:"bytes,5,opt,name=text" json:"text,omitempty"`
}

func (m *NumberNodePb) Reset()                    { *m = NumberNodePb{} }
func (m *NumberNodePb) String() string            { return proto.CompactTextString(m) }
func (*NumberNodePb) ProtoMessage()               {}
func (*NumberNodePb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *NumberNodePb) GetIsint() bool {
	if m != nil {
		return m.Isint
	}
	return false
}

func (m *NumberNodePb) GetIsfloat() bool {
	if m != nil {
		return m.Isfloat
	}
	return false
}

func (m *NumberNodePb) GetIv() int64 {
	if m != nil {
		return m.Iv
	}
	return 0
}

func (m *NumberNodePb) GetFv() float64 {
	if m != nil {
		return m.Fv
	}
	return 0
}

func (m *NumberNodePb) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// Value Node
type ValueNodePb struct {
	Valuetype int32  `protobuf:"varint,1,opt,name=valuetype" json:"valuetype,omitempty"`
	Value     []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ValueNodePb) Reset()                    { *m = ValueNodePb{} }
func (m *ValueNodePb) String() string            { return proto.CompactTextString(m) }
func (*ValueNodePb) ProtoMessage()               {}
func (*ValueNodePb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ValueNodePb) GetValuetype() int32 {
	if m != nil {
		return m.Valuetype
	}
	return 0
}

func (m *ValueNodePb) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// NullNode
type NullNodePb struct {
	Niltype int32 `protobuf:"varint,1,opt,name=niltype" json:"niltype,omitempty"`
}

func (m *NullNodePb) Reset()                    { *m = NullNodePb{} }
func (m *NullNodePb) String() string            { return proto.CompactTextString(m) }
func (*NullNodePb) ProtoMessage()               {}
func (*NullNodePb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *NullNodePb) GetNiltype() int32 {
	if m != nil {
		return m.Niltype
	}
	return 0
}

func init() {
	proto.RegisterType((*Expr)(nil), "expr.Expr")
	proto.RegisterType((*NodePb)(nil), "expr.NodePb")
	proto.RegisterType((*BinaryNodePb)(nil), "expr.BinaryNodePb")
	proto.RegisterType((*BooleanNodePb)(nil), "expr.BooleanNodePb")
	proto.RegisterType((*IncludeNodePb)(nil), "expr.IncludeNodePb")
	proto.RegisterType((*UnaryNodePb)(nil), "expr.UnaryNodePb")
	proto.RegisterType((*FuncNodePb)(nil), "expr.FuncNodePb")
	proto.RegisterType((*TriNodePb)(nil), "expr.TriNodePb")
	proto.RegisterType((*ArrayNodePb)(nil), "expr.ArrayNodePb")
	proto.RegisterType((*StringNodePb)(nil), "expr.StringNodePb")
	proto.RegisterType((*IdentityNodePb)(nil), "expr.IdentityNodePb")
	proto.RegisterType((*NumberNodePb)(nil), "expr.NumberNodePb")
	proto.RegisterType((*ValueNodePb)(nil), "expr.ValueNodePb")
	proto.RegisterType((*NullNodePb)(nil), "expr.NullNodePb")
}

func init() { proto.RegisterFile("node.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 635 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0x13, 0x31,
	0x10, 0x55, 0xf6, 0x23, 0x6d, 0x66, 0xd3, 0x0f, 0x4c, 0x85, 0x7c, 0x40, 0x25, 0xac, 0x2a, 0x28,
	0x97, 0x0a, 0x85, 0x1b, 0x12, 0x87, 0x16, 0x81, 0xd4, 0x4b, 0x85, 0xb6, 0x1f, 0x77, 0xa7, 0xd9,
	0x44, 0x16, 0xdb, 0xf1, 0xe2, 0x78, 0x97, 0xf4, 0x5f, 0xf0, 0x93, 0xf8, 0x69, 0xc8, 0xe3, 0x75,
	0xe2, 0xa8, 0x20, 0x0a, 0xb7, 0x7d, 0xf6, 0xdb, 0xf7, 0x66, 0x9e, 0xc7, 0x06, 0x40, 0x35, 0x2d,
	0x4f, 0x6a, 0xad, 0x8c, 0x62, 0x49, 0xb9, 0xac, 0x75, 0xfe, 0xa3, 0x07, 0xc9, 0xa7, 0x65, 0xad,
	0xd9, 0x2e, 0x44, 0xaa, 0xe6, 0xbd, 0x51, 0xef, 0x78, 0x50, 0x44, 0xaa, 0x66, 0xcf, 0xa0, 0xaf,
	0xea, 0xab, 0xfb, 0xba, 0xe4, 0xd1, 0xa8, 0x77, 0x9c, 0x16, 0x1d, 0x62, 0x87, 0x90, 0x08, 0x3d,
	0x5f, 0xf0, 0x78, 0x14, 0x1f, 0x67, 0x63, 0x38, 0xb1, 0x2a, 0x27, 0x56, 0xa1, 0xa0, 0x75, 0x76,
	0x00, 0xa9, 0x9c, 0x96, 0x68, 0x78, 0x42, 0x52, 0x0e, 0xb0, 0x7d, 0x88, 0x5b, 0x51, 0xf1, 0x94,
	0xd6, 0xec, 0x27, 0xe3, 0xb0, 0xd5, 0x8a, 0x8a, 0x0c, 0xfa, 0x64, 0xe0, 0x61, 0xfe, 0x33, 0x86,
	0xfe, 0x85, 0x9a, 0x96, 0x5f, 0x26, 0x2c, 0x87, 0x68, 0x82, 0x54, 0x54, 0x36, 0x66, 0xce, 0xea,
	0x4c, 0xa2, 0xd0, 0xf7, 0x6e, 0xbf, 0x88, 0x26, 0xc8, 0xde, 0x40, 0x3a, 0x51, 0xaa, 0x42, 0xaa,
	0x33, 0x1b, 0x3f, 0xed, 0x68, 0x4a, 0x55, 0xa5, 0xc0, 0x8e, 0xe7, 0x18, 0xec, 0x25, 0x44, 0x0d,
	0xf2, 0x98, 0x78, 0x4f, 0x1c, 0xef, 0x3a, 0x54, 0x6b, 0x90, 0x8d, 0x20, 0x9a, 0x21, 0xd5, 0x9e,
	0x8d, 0xf7, 0x1d, 0xe5, 0x73, 0x83, 0xb7, 0x9e, 0x31, 0x43, 0xf6, 0x02, 0x22, 0x83, 0xd4, 0x49,
	0x36, 0xde, 0x73, 0x8c, 0x2b, 0x2d, 0x3d, 0xc1, 0x90, 0x8b, 0x40, 0x6a, 0x6a, 0xe5, 0x72, 0xaa,
	0xb5, 0x58, 0xb9, 0x08, 0xb4, 0x7d, 0x21, 0x72, 0x08, 0xfb, 0xba, 0x68, 0xee, 0x26, 0xa5, 0xf6,
	0x1c, 0x24, 0x99, 0x16, 0x79, 0x16, 0xca, 0xdc, 0x88, 0xaa, 0x29, 0x3d, 0xa5, 0x45, 0x76, 0x04,
	0x91, 0x44, 0x3e, 0x24, 0xca, 0x81, 0xa3, 0x9c, 0xdb, 0xb8, 0xa5, 0x59, 0x99, 0x49, 0x32, 0x5b,
	0x20, 0xdf, 0x09, 0xcd, 0x2e, 0x8d, 0x96, 0x38, 0xf7, 0x9c, 0x05, 0xb2, 0xd7, 0x90, 0x48, 0xbc,
	0x45, 0xbe, 0x1b, 0x66, 0x78, 0x8e, 0xb7, 0x55, 0x33, 0xf5, 0x86, 0x44, 0x60, 0x47, 0x90, 0xa0,
	0xac, 0x90, 0xef, 0x85, 0x09, 0x5d, 0x34, 0x55, 0xe5, 0x59, 0x76, 0x37, 0xbf, 0x81, 0x61, 0x78,
	0x4e, 0xc1, 0x70, 0xa5, 0x34, 0x5c, 0x07, 0x90, 0xd6, 0x42, 0x97, 0xee, 0xcc, 0xb6, 0x0b, 0x07,
	0xd8, 0x68, 0x63, 0xb4, 0x86, 0x9d, 0x76, 0xa7, 0x6b, 0x77, 0xf2, 0x53, 0xd8, 0xd9, 0x38, 0xd8,
	0x07, 0xc2, 0x5e, 0x22, 0xfa, 0xa3, 0xc4, 0x57, 0xd8, 0xd9, 0xe8, 0xeb, 0x81, 0x04, 0x87, 0x2d,
	0x2c, 0xe7, 0xc2, 0x94, 0xd3, 0xae, 0x3a, 0x0f, 0xd9, 0x5b, 0xd8, 0x96, 0x5d, 0xbc, 0xdd, 0x10,
	0xfd, 0x3e, 0xf4, 0x15, 0x2b, 0xbf, 0x84, 0xec, 0xfa, 0x9f, 0x63, 0x38, 0x84, 0x58, 0xe8, 0x79,
	0xe7, 0xb0, 0xd9, 0x82, 0xdd, 0xc8, 0xcf, 0x00, 0xd6, 0x23, 0xc9, 0x18, 0x24, 0x28, 0xee, 0xca,
	0xee, 0xe6, 0xd2, 0xf7, 0x23, 0x52, 0xf8, 0x00, 0x83, 0xd5, 0xd0, 0xfe, 0x47, 0x88, 0x1f, 0x21,
	0x0b, 0x46, 0xda, 0xd6, 0xf0, 0x5d, 0x0b, 0x2f, 0x41, 0xdf, 0x8f, 0x38, 0xcc, 0x02, 0x86, 0xe1,
	0x1c, 0x52, 0xf0, 0xea, 0x5b, 0xa3, 0x8c, 0x6b, 0xc6, 0x06, 0xef, 0xa0, 0xcd, 0xc9, 0xad, 0xbb,
	0xa7, 0xc8, 0x01, 0xeb, 0x6a, 0xca, 0xa5, 0xa1, 0xa0, 0x06, 0x05, 0x7d, 0xe7, 0xef, 0x61, 0x77,
	0xf3, 0x30, 0xd6, 0xff, 0xf6, 0xfe, 0xf6, 0xaf, 0x86, 0x61, 0x78, 0x09, 0xe9, 0x25, 0x5b, 0x48,
	0x34, 0x5d, 0x35, 0x0e, 0xd8, 0x2a, 0xe5, 0x62, 0x56, 0x29, 0x61, 0xfc, 0x78, 0x74, 0xd0, 0xc6,
	0x28, 0x5b, 0x52, 0x8c, 0x8b, 0x48, 0xb6, 0x16, 0xcf, 0x5a, 0x7a, 0x4a, 0x7a, 0x45, 0x34, 0x6b,
	0x57, 0x9e, 0x69, 0xe0, 0x79, 0x0a, 0x59, 0x70, 0xa9, 0xd9, 0x73, 0x18, 0xb4, 0x16, 0x1a, 0xfb,
	0x2c, 0xba, 0x82, 0xd7, 0x0b, 0xb6, 0x20, 0x02, 0x64, 0x3c, 0x2c, 0x1c, 0xc8, 0x5f, 0x01, 0xac,
	0xef, 0x1f, 0x85, 0x28, 0xab, 0xe0, 0x7f, 0x0f, 0x27, 0x7d, 0x7a, 0xf6, 0xdf, 0xfd, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0xb8, 0xc9, 0xf2, 0x2f, 0x04, 0x06, 0x00, 0x00,
}
