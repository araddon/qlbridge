syntax = "proto3";
package expr;

// protoc --go_out=. *.proto


// Expr an S-Expression https://en.wikipedia.org/wiki/S-expression representation
// of the AST tree of expression.
// EITHER (op,args) OR (one of ident, val) will be present but not both.
message Expr {
  string op = 1;
  int32 opType = 2;
  repeated Expr args = 3;
  
  string ident = 4;
  string val = 5;
  int32 valType = 6;
}

// Node expression must be exactly one of these types
message NodePb {
  BinaryNodePb bn = 1;
  BooleanNodePb booln = 2;
  UnaryNodePb un = 3;
  FuncNodePb fn = 4;
  TriNodePb tn = 5;
  ArrayNodePb an = 6;
  NumberNodePb nn = 10;
  ValueNodePb vn = 11;
  IdentityNodePb in = 12;
  StringNodePb sn = 13;
  IncludeNodePb incn = 14;
  NullNodePb niln = 15;
}

// BinaryNodePb two child args and operation
message BinaryNodePb {
	int32 op = 1;
	bool paren = 2;
	repeated NodePb args = 3;
}

// Boolean Node, n child args
message BooleanNodePb {
	int32 op = 1;
	repeated NodePb args = 2;
}

// Include Node, two child args
message IncludeNodePb {
	int32 op = 1;
	bool negated = 2;
	IdentityNodePb identity = 3;
}

// Unary Node, one child
message UnaryNodePb {
	int32 op = 1;
	bool paren = 2;
	NodePb arg = 3;
}

// Func Node, args are children
message FuncNodePb {
	string name = 1;
	repeated NodePb args = 2;
}

// TriNodePb, may have children
message TriNodePb {
	int32 op = 1;
	repeated NodePb args = 2;
}

// Array Node
message ArrayNodePb {
	int32 wrap = 1;
	repeated NodePb args = 3;
}

// String literal, no children
message StringNodePb {
	bool noquote = 1;
	int32 quote = 2;
	string text = 3;
}

// Identity
message IdentityNodePb {
	int32 quote = 1;
	string text = 3;
}

// Number Node
message NumberNodePb {
	bool isint = 1;
	bool isfloat = 2;
	int64 iv = 3;
	double fv = 4;
	string text = 5;
}

// Value Node
message ValueNodePb {
	int32 valuetype = 1;
	bytes value = 2;
}

// NullNode
message NullNodePb {
	int32 niltype = 1;
}
