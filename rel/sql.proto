syntax = "proto3";
package rel;

import "github.com/araddon/qlbridge/expr/node.proto";

// protoc --proto_path=$GOPATH/src:. --go_out=. *.proto

// The generic SqlStatement, must be exactly one of these types
message SqlStatementPb {
  SqlSelectPb  select = 1;
  SqlSourcePb  source = 2;
  ProjectionPb projection = 4;
}

message SqlSelectPb {
  string db = 1;
  string raw = 2;
  bool star = 3;
  bool distinct = 4;
  repeated ColumnPb columns = 5;
  repeated SqlSourcePb from = 6;
  string into = 7;
  SqlWherePb where = 8;
  expr.NodePb having = 9;
  repeated ColumnPb groupBy = 10;
  repeated ColumnPb orderBy = 11;
  int32 limit = 12;
  int32 offset = 13;
  string alias = 14;
  ProjectionPb projection = 15;
  bool isAgg = 16;
  bool finalized = 17;
  bool schemaqry = 18;
  bytes with   = 19;
}

message SqlSourcePb {
  bool final = 1;
  string aliasInner = 2;
  repeated ColumnPb columns = 3;
  repeated KvInt colIndex = 4;
  repeated expr.NodePb joinNodes = 5;
  SqlSelectPb source = 6;
  string raw = 7;
  string name = 8;
  string alias = 9;
  int32 op = 10;
  int32 leftOrRight = 11;
  int32 joinType = 12;
  expr.NodePb joinExpr = 13;
  SqlSelectPb subQuery = 14;
  bool seekable = 15;
}

message SqlWherePb {
  int32 op = 1;
  SqlSelectPb source = 2;
  expr.NodePb Expr = 3;
}

message ProjectionPb {
  bool distinct          = 1;
  bool final             = 2;
  repeated string colNames        = 3;
  repeated ResultColumnPb columns = 4;
}

message ResultColumnPb {
  bool final = 1;
  string name = 2;
  int32 colPos = 3;
  ColumnPb column = 4;
  bool star = 5;
  string as = 6;
  int32 valueType = 7;
}


message KvInt {
  string k = 1;
  int32 v = 2;
}


message ColumnPb {
  bytes sourceQuote = 1;
  bytes asQuoteByte = 2;
  string originalAs = 3;
  string left = 4;
  string right = 5;
  int32 parentIndex = 6;
  int32 index = 7;
  int32 sourceIndex = 8;
  string sourceField = 9;
  string as  = 11;
  string comment  = 12;
  string order = 13;
  bool star = 14;
  bool agg = 15;
  expr.NodePb Expr = 16;
  expr.NodePb Guard = 17;
}



message CommandColumnPb {
  expr.NodePb Expr = 1;
  string name = 2;
}