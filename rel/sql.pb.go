// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sql.proto

/*
Package rel is a generated protocol buffer package.

It is generated from these files:
	sql.proto

It has these top-level messages:
	SqlStatementPb
	SqlSelectPb
	SqlSourcePb
	SqlWherePb
	ProjectionPb
	ResultColumnPb
	KvInt
	ColumnPb
	CommandColumnPb
*/
package rel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import expr "github.com/araddon/qlbridge/expr"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The generic SqlStatement, must be exactly one of these types
type SqlStatementPb struct {
	Select     *SqlSelectPb  `protobuf:"bytes,1,opt,name=select" json:"select,omitempty"`
	Source     *SqlSourcePb  `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Projection *ProjectionPb `protobuf:"bytes,4,opt,name=projection" json:"projection,omitempty"`
}

func (m *SqlStatementPb) Reset()                    { *m = SqlStatementPb{} }
func (m *SqlStatementPb) String() string            { return proto.CompactTextString(m) }
func (*SqlStatementPb) ProtoMessage()               {}
func (*SqlStatementPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SqlStatementPb) GetSelect() *SqlSelectPb {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *SqlStatementPb) GetSource() *SqlSourcePb {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *SqlStatementPb) GetProjection() *ProjectionPb {
	if m != nil {
		return m.Projection
	}
	return nil
}

type SqlSelectPb struct {
	Db         string         `protobuf:"bytes,1,opt,name=db" json:"db,omitempty"`
	Raw        string         `protobuf:"bytes,2,opt,name=raw" json:"raw,omitempty"`
	Star       bool           `protobuf:"varint,3,opt,name=star" json:"star,omitempty"`
	Distinct   bool           `protobuf:"varint,4,opt,name=distinct" json:"distinct,omitempty"`
	Columns    []*ColumnPb    `protobuf:"bytes,5,rep,name=columns" json:"columns,omitempty"`
	From       []*SqlSourcePb `protobuf:"bytes,6,rep,name=from" json:"from,omitempty"`
	Into       string         `protobuf:"bytes,7,opt,name=into" json:"into,omitempty"`
	Where      *SqlWherePb    `protobuf:"bytes,8,opt,name=where" json:"where,omitempty"`
	Having     *expr.NodePb   `protobuf:"bytes,9,opt,name=having" json:"having,omitempty"`
	GroupBy    []*ColumnPb    `protobuf:"bytes,10,rep,name=groupBy" json:"groupBy,omitempty"`
	OrderBy    []*ColumnPb    `protobuf:"bytes,11,rep,name=orderBy" json:"orderBy,omitempty"`
	Limit      int32          `protobuf:"varint,12,opt,name=limit" json:"limit,omitempty"`
	Offset     int32          `protobuf:"varint,13,opt,name=offset" json:"offset,omitempty"`
	Alias      string         `protobuf:"bytes,14,opt,name=alias" json:"alias,omitempty"`
	Projection *ProjectionPb  `protobuf:"bytes,15,opt,name=projection" json:"projection,omitempty"`
	IsAgg      bool           `protobuf:"varint,16,opt,name=isAgg" json:"isAgg,omitempty"`
	Finalized  bool           `protobuf:"varint,17,opt,name=finalized" json:"finalized,omitempty"`
	Schemaqry  bool           `protobuf:"varint,18,opt,name=schemaqry" json:"schemaqry,omitempty"`
	With       []byte         `protobuf:"bytes,19,opt,name=with,proto3" json:"with,omitempty"`
}

func (m *SqlSelectPb) Reset()                    { *m = SqlSelectPb{} }
func (m *SqlSelectPb) String() string            { return proto.CompactTextString(m) }
func (*SqlSelectPb) ProtoMessage()               {}
func (*SqlSelectPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SqlSelectPb) GetDb() string {
	if m != nil {
		return m.Db
	}
	return ""
}

func (m *SqlSelectPb) GetRaw() string {
	if m != nil {
		return m.Raw
	}
	return ""
}

func (m *SqlSelectPb) GetStar() bool {
	if m != nil {
		return m.Star
	}
	return false
}

func (m *SqlSelectPb) GetDistinct() bool {
	if m != nil {
		return m.Distinct
	}
	return false
}

func (m *SqlSelectPb) GetColumns() []*ColumnPb {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *SqlSelectPb) GetFrom() []*SqlSourcePb {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *SqlSelectPb) GetInto() string {
	if m != nil {
		return m.Into
	}
	return ""
}

func (m *SqlSelectPb) GetWhere() *SqlWherePb {
	if m != nil {
		return m.Where
	}
	return nil
}

func (m *SqlSelectPb) GetHaving() *expr.NodePb {
	if m != nil {
		return m.Having
	}
	return nil
}

func (m *SqlSelectPb) GetGroupBy() []*ColumnPb {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *SqlSelectPb) GetOrderBy() []*ColumnPb {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *SqlSelectPb) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SqlSelectPb) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SqlSelectPb) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *SqlSelectPb) GetProjection() *ProjectionPb {
	if m != nil {
		return m.Projection
	}
	return nil
}

func (m *SqlSelectPb) GetIsAgg() bool {
	if m != nil {
		return m.IsAgg
	}
	return false
}

func (m *SqlSelectPb) GetFinalized() bool {
	if m != nil {
		return m.Finalized
	}
	return false
}

func (m *SqlSelectPb) GetSchemaqry() bool {
	if m != nil {
		return m.Schemaqry
	}
	return false
}

func (m *SqlSelectPb) GetWith() []byte {
	if m != nil {
		return m.With
	}
	return nil
}

type SqlSourcePb struct {
	Final       bool           `protobuf:"varint,1,opt,name=final" json:"final,omitempty"`
	AliasInner  string         `protobuf:"bytes,2,opt,name=aliasInner" json:"aliasInner,omitempty"`
	Columns     []*ColumnPb    `protobuf:"bytes,3,rep,name=columns" json:"columns,omitempty"`
	ColIndex    []*KvInt       `protobuf:"bytes,4,rep,name=colIndex" json:"colIndex,omitempty"`
	JoinNodes   []*expr.NodePb `protobuf:"bytes,5,rep,name=joinNodes" json:"joinNodes,omitempty"`
	Source      *SqlSelectPb   `protobuf:"bytes,6,opt,name=source" json:"source,omitempty"`
	Raw         string         `protobuf:"bytes,7,opt,name=raw" json:"raw,omitempty"`
	Name        string         `protobuf:"bytes,8,opt,name=name" json:"name,omitempty"`
	Alias       string         `protobuf:"bytes,9,opt,name=alias" json:"alias,omitempty"`
	Op          int32          `protobuf:"varint,10,opt,name=op" json:"op,omitempty"`
	LeftOrRight int32          `protobuf:"varint,11,opt,name=leftOrRight" json:"leftOrRight,omitempty"`
	JoinType    int32          `protobuf:"varint,12,opt,name=joinType" json:"joinType,omitempty"`
	JoinExpr    *expr.NodePb   `protobuf:"bytes,13,opt,name=joinExpr" json:"joinExpr,omitempty"`
	SubQuery    *SqlSelectPb   `protobuf:"bytes,14,opt,name=subQuery" json:"subQuery,omitempty"`
	Seekable    bool           `protobuf:"varint,15,opt,name=seekable" json:"seekable,omitempty"`
}

func (m *SqlSourcePb) Reset()                    { *m = SqlSourcePb{} }
func (m *SqlSourcePb) String() string            { return proto.CompactTextString(m) }
func (*SqlSourcePb) ProtoMessage()               {}
func (*SqlSourcePb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SqlSourcePb) GetFinal() bool {
	if m != nil {
		return m.Final
	}
	return false
}

func (m *SqlSourcePb) GetAliasInner() string {
	if m != nil {
		return m.AliasInner
	}
	return ""
}

func (m *SqlSourcePb) GetColumns() []*ColumnPb {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *SqlSourcePb) GetColIndex() []*KvInt {
	if m != nil {
		return m.ColIndex
	}
	return nil
}

func (m *SqlSourcePb) GetJoinNodes() []*expr.NodePb {
	if m != nil {
		return m.JoinNodes
	}
	return nil
}

func (m *SqlSourcePb) GetSource() *SqlSelectPb {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *SqlSourcePb) GetRaw() string {
	if m != nil {
		return m.Raw
	}
	return ""
}

func (m *SqlSourcePb) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SqlSourcePb) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *SqlSourcePb) GetOp() int32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *SqlSourcePb) GetLeftOrRight() int32 {
	if m != nil {
		return m.LeftOrRight
	}
	return 0
}

func (m *SqlSourcePb) GetJoinType() int32 {
	if m != nil {
		return m.JoinType
	}
	return 0
}

func (m *SqlSourcePb) GetJoinExpr() *expr.NodePb {
	if m != nil {
		return m.JoinExpr
	}
	return nil
}

func (m *SqlSourcePb) GetSubQuery() *SqlSelectPb {
	if m != nil {
		return m.SubQuery
	}
	return nil
}

func (m *SqlSourcePb) GetSeekable() bool {
	if m != nil {
		return m.Seekable
	}
	return false
}

type SqlWherePb struct {
	Op     int32        `protobuf:"varint,1,opt,name=op" json:"op,omitempty"`
	Source *SqlSelectPb `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Expr   *expr.NodePb `protobuf:"bytes,3,opt,name=Expr" json:"Expr,omitempty"`
}

func (m *SqlWherePb) Reset()                    { *m = SqlWherePb{} }
func (m *SqlWherePb) String() string            { return proto.CompactTextString(m) }
func (*SqlWherePb) ProtoMessage()               {}
func (*SqlWherePb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SqlWherePb) GetOp() int32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *SqlWherePb) GetSource() *SqlSelectPb {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *SqlWherePb) GetExpr() *expr.NodePb {
	if m != nil {
		return m.Expr
	}
	return nil
}

type ProjectionPb struct {
	Distinct bool              `protobuf:"varint,1,opt,name=distinct" json:"distinct,omitempty"`
	Final    bool              `protobuf:"varint,2,opt,name=final" json:"final,omitempty"`
	ColNames []string          `protobuf:"bytes,3,rep,name=colNames" json:"colNames,omitempty"`
	Columns  []*ResultColumnPb `protobuf:"bytes,4,rep,name=columns" json:"columns,omitempty"`
}

func (m *ProjectionPb) Reset()                    { *m = ProjectionPb{} }
func (m *ProjectionPb) String() string            { return proto.CompactTextString(m) }
func (*ProjectionPb) ProtoMessage()               {}
func (*ProjectionPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ProjectionPb) GetDistinct() bool {
	if m != nil {
		return m.Distinct
	}
	return false
}

func (m *ProjectionPb) GetFinal() bool {
	if m != nil {
		return m.Final
	}
	return false
}

func (m *ProjectionPb) GetColNames() []string {
	if m != nil {
		return m.ColNames
	}
	return nil
}

func (m *ProjectionPb) GetColumns() []*ResultColumnPb {
	if m != nil {
		return m.Columns
	}
	return nil
}

type ResultColumnPb struct {
	Final     bool      `protobuf:"varint,1,opt,name=final" json:"final,omitempty"`
	Name      string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ColPos    int32     `protobuf:"varint,3,opt,name=colPos" json:"colPos,omitempty"`
	Column    *ColumnPb `protobuf:"bytes,4,opt,name=column" json:"column,omitempty"`
	Star      bool      `protobuf:"varint,5,opt,name=star" json:"star,omitempty"`
	As        string    `protobuf:"bytes,6,opt,name=as" json:"as,omitempty"`
	ValueType int32     `protobuf:"varint,7,opt,name=valueType" json:"valueType,omitempty"`
}

func (m *ResultColumnPb) Reset()                    { *m = ResultColumnPb{} }
func (m *ResultColumnPb) String() string            { return proto.CompactTextString(m) }
func (*ResultColumnPb) ProtoMessage()               {}
func (*ResultColumnPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ResultColumnPb) GetFinal() bool {
	if m != nil {
		return m.Final
	}
	return false
}

func (m *ResultColumnPb) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResultColumnPb) GetColPos() int32 {
	if m != nil {
		return m.ColPos
	}
	return 0
}

func (m *ResultColumnPb) GetColumn() *ColumnPb {
	if m != nil {
		return m.Column
	}
	return nil
}

func (m *ResultColumnPb) GetStar() bool {
	if m != nil {
		return m.Star
	}
	return false
}

func (m *ResultColumnPb) GetAs() string {
	if m != nil {
		return m.As
	}
	return ""
}

func (m *ResultColumnPb) GetValueType() int32 {
	if m != nil {
		return m.ValueType
	}
	return 0
}

type KvInt struct {
	K string `protobuf:"bytes,1,opt,name=k" json:"k,omitempty"`
	V int32  `protobuf:"varint,2,opt,name=v" json:"v,omitempty"`
}

func (m *KvInt) Reset()                    { *m = KvInt{} }
func (m *KvInt) String() string            { return proto.CompactTextString(m) }
func (*KvInt) ProtoMessage()               {}
func (*KvInt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *KvInt) GetK() string {
	if m != nil {
		return m.K
	}
	return ""
}

func (m *KvInt) GetV() int32 {
	if m != nil {
		return m.V
	}
	return 0
}

type ColumnPb struct {
	SourceQuote []byte       `protobuf:"bytes,1,opt,name=sourceQuote,proto3" json:"sourceQuote,omitempty"`
	AsQuoteByte []byte       `protobuf:"bytes,2,opt,name=asQuoteByte,proto3" json:"asQuoteByte,omitempty"`
	OriginalAs  string       `protobuf:"bytes,3,opt,name=originalAs" json:"originalAs,omitempty"`
	Left        string       `protobuf:"bytes,4,opt,name=left" json:"left,omitempty"`
	Right       string       `protobuf:"bytes,5,opt,name=right" json:"right,omitempty"`
	ParentIndex int32        `protobuf:"varint,6,opt,name=parentIndex" json:"parentIndex,omitempty"`
	Index       int32        `protobuf:"varint,7,opt,name=index" json:"index,omitempty"`
	SourceIndex int32        `protobuf:"varint,8,opt,name=sourceIndex" json:"sourceIndex,omitempty"`
	SourceField string       `protobuf:"bytes,9,opt,name=sourceField" json:"sourceField,omitempty"`
	As          string       `protobuf:"bytes,11,opt,name=as" json:"as,omitempty"`
	Comment     string       `protobuf:"bytes,12,opt,name=comment" json:"comment,omitempty"`
	Order       string       `protobuf:"bytes,13,opt,name=order" json:"order,omitempty"`
	Star        bool         `protobuf:"varint,14,opt,name=star" json:"star,omitempty"`
	Agg         bool         `protobuf:"varint,15,opt,name=agg" json:"agg,omitempty"`
	Expr        *expr.NodePb `protobuf:"bytes,16,opt,name=Expr" json:"Expr,omitempty"`
	Guard       *expr.NodePb `protobuf:"bytes,17,opt,name=Guard" json:"Guard,omitempty"`
}

func (m *ColumnPb) Reset()                    { *m = ColumnPb{} }
func (m *ColumnPb) String() string            { return proto.CompactTextString(m) }
func (*ColumnPb) ProtoMessage()               {}
func (*ColumnPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ColumnPb) GetSourceQuote() []byte {
	if m != nil {
		return m.SourceQuote
	}
	return nil
}

func (m *ColumnPb) GetAsQuoteByte() []byte {
	if m != nil {
		return m.AsQuoteByte
	}
	return nil
}

func (m *ColumnPb) GetOriginalAs() string {
	if m != nil {
		return m.OriginalAs
	}
	return ""
}

func (m *ColumnPb) GetLeft() string {
	if m != nil {
		return m.Left
	}
	return ""
}

func (m *ColumnPb) GetRight() string {
	if m != nil {
		return m.Right
	}
	return ""
}

func (m *ColumnPb) GetParentIndex() int32 {
	if m != nil {
		return m.ParentIndex
	}
	return 0
}

func (m *ColumnPb) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ColumnPb) GetSourceIndex() int32 {
	if m != nil {
		return m.SourceIndex
	}
	return 0
}

func (m *ColumnPb) GetSourceField() string {
	if m != nil {
		return m.SourceField
	}
	return ""
}

func (m *ColumnPb) GetAs() string {
	if m != nil {
		return m.As
	}
	return ""
}

func (m *ColumnPb) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *ColumnPb) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *ColumnPb) GetStar() bool {
	if m != nil {
		return m.Star
	}
	return false
}

func (m *ColumnPb) GetAgg() bool {
	if m != nil {
		return m.Agg
	}
	return false
}

func (m *ColumnPb) GetExpr() *expr.NodePb {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (m *ColumnPb) GetGuard() *expr.NodePb {
	if m != nil {
		return m.Guard
	}
	return nil
}

type CommandColumnPb struct {
	Expr *expr.NodePb `protobuf:"bytes,1,opt,name=Expr" json:"Expr,omitempty"`
	Name string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *CommandColumnPb) Reset()                    { *m = CommandColumnPb{} }
func (m *CommandColumnPb) String() string            { return proto.CompactTextString(m) }
func (*CommandColumnPb) ProtoMessage()               {}
func (*CommandColumnPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CommandColumnPb) GetExpr() *expr.NodePb {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (m *CommandColumnPb) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*SqlStatementPb)(nil), "rel.SqlStatementPb")
	proto.RegisterType((*SqlSelectPb)(nil), "rel.SqlSelectPb")
	proto.RegisterType((*SqlSourcePb)(nil), "rel.SqlSourcePb")
	proto.RegisterType((*SqlWherePb)(nil), "rel.SqlWherePb")
	proto.RegisterType((*ProjectionPb)(nil), "rel.ProjectionPb")
	proto.RegisterType((*ResultColumnPb)(nil), "rel.ResultColumnPb")
	proto.RegisterType((*KvInt)(nil), "rel.KvInt")
	proto.RegisterType((*ColumnPb)(nil), "rel.ColumnPb")
	proto.RegisterType((*CommandColumnPb)(nil), "rel.CommandColumnPb")
}

func init() { proto.RegisterFile("sql.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 968 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xff, 0x6e, 0xdb, 0x36,
	0x10, 0x86, 0x6c, 0xcb, 0x91, 0xce, 0xae, 0xe3, 0xb2, 0x43, 0x41, 0x04, 0xc3, 0x60, 0x68, 0xed,
	0x66, 0xec, 0x87, 0x83, 0x75, 0x4f, 0xd0, 0x14, 0x5b, 0x11, 0x0c, 0xe8, 0x5c, 0x76, 0xc0, 0xfe,
	0xa6, 0x2c, 0x5a, 0x56, 0x23, 0x89, 0x0e, 0x45, 0x39, 0xf1, 0x5e, 0x61, 0x0f, 0xb0, 0x87, 0x19,
	0x30, 0xec, 0x71, 0xf6, 0x18, 0x03, 0x8f, 0xb2, 0xcc, 0x38, 0xf6, 0xb0, 0xff, 0xee, 0xee, 0x3b,
	0x8a, 0x77, 0xbc, 0xef, 0x3b, 0x1b, 0xc2, 0xea, 0x36, 0x9f, 0xad, 0x95, 0xd4, 0x92, 0x74, 0x95,
	0xc8, 0x2f, 0xbe, 0x4e, 0x33, 0xbd, 0xaa, 0xe3, 0xd9, 0x42, 0x16, 0x97, 0x5c, 0xf1, 0x24, 0x91,
	0xe5, 0xe5, 0x6d, 0x1e, 0xab, 0x2c, 0x49, 0xc5, 0xa5, 0xb8, 0x5f, 0xab, 0xcb, 0x52, 0x26, 0xc2,
	0x9e, 0x88, 0xfe, 0xf0, 0x60, 0xf4, 0xe1, 0x36, 0xff, 0xa0, 0xb9, 0x16, 0x85, 0x28, 0xf5, 0x3c,
	0x26, 0x53, 0xe8, 0x57, 0x22, 0x17, 0x0b, 0x4d, 0xbd, 0x89, 0x37, 0x1d, 0xbc, 0x1a, 0xcf, 0x94,
	0xc8, 0x67, 0x26, 0x09, 0xa3, 0xf3, 0x98, 0x35, 0x38, 0x66, 0xca, 0x5a, 0x2d, 0x04, 0xed, 0x1c,
	0x64, 0x62, 0x14, 0x33, 0xd1, 0x22, 0xdf, 0x01, 0xac, 0x95, 0xfc, 0x28, 0x16, 0x3a, 0x93, 0x25,
	0xed, 0x61, 0xf6, 0x53, 0xcc, 0x9e, 0xb7, 0xe1, 0x79, 0xcc, 0x9c, 0xa4, 0xe8, 0xaf, 0x1e, 0x0c,
	0x9c, 0x4b, 0xc9, 0x08, 0x3a, 0x49, 0x8c, 0x25, 0x85, 0xac, 0x93, 0xc4, 0x64, 0x0c, 0x5d, 0xc5,
	0xef, 0xf0, 0xe6, 0x90, 0x19, 0x93, 0x10, 0xe8, 0x55, 0x9a, 0x2b, 0xda, 0x9d, 0x78, 0xd3, 0x80,
	0xa1, 0x4d, 0x2e, 0x20, 0x48, 0xb2, 0x4a, 0x67, 0xe5, 0x42, 0xe3, 0xb5, 0x01, 0x6b, 0x7d, 0xf2,
	0x25, 0x9c, 0x2d, 0x64, 0x5e, 0x17, 0x65, 0x45, 0xfd, 0x49, 0x77, 0x3a, 0x78, 0xf5, 0x04, 0x2b,
	0x7a, 0x83, 0xb1, 0x79, 0xcc, 0x76, 0x28, 0x79, 0x01, 0xbd, 0xa5, 0x92, 0x05, 0xed, 0x63, 0xd6,
	0xe3, 0x2e, 0x11, 0x35, 0xd7, 0x67, 0xa5, 0x96, 0xf4, 0x0c, 0x2b, 0x42, 0x9b, 0xbc, 0x04, 0xff,
	0x6e, 0x25, 0x94, 0xa0, 0x01, 0xb6, 0x7c, 0xbe, 0x3b, 0xfa, 0xab, 0x09, 0xce, 0x63, 0x66, 0x51,
	0xf2, 0x02, 0xfa, 0x2b, 0xbe, 0xc9, 0xca, 0x94, 0x86, 0x98, 0x37, 0x9c, 0x99, 0x39, 0xcd, 0xde,
	0xc9, 0x04, 0x1f, 0xd1, 0x62, 0xa6, 0xde, 0x54, 0xc9, 0x7a, 0x7d, 0xb5, 0xa5, 0x70, 0xb4, 0xde,
	0x06, 0x35, 0x89, 0x52, 0x25, 0x42, 0x5d, 0x6d, 0xe9, 0xe0, 0x68, 0x62, 0x83, 0x92, 0x4f, 0xc0,
	0xcf, 0xb3, 0x22, 0xd3, 0x74, 0x38, 0xf1, 0xa6, 0x3e, 0xb3, 0x0e, 0x79, 0x0e, 0x7d, 0xb9, 0x5c,
	0x56, 0x42, 0xd3, 0x27, 0x18, 0x6e, 0x3c, 0x93, 0xcd, 0xf3, 0x8c, 0x57, 0x74, 0x84, 0x1d, 0x5a,
	0xe7, 0x60, 0xb4, 0xe7, 0xff, 0x63, 0xb4, 0xe6, 0x43, 0x59, 0xf5, 0x3a, 0x4d, 0xe9, 0x18, 0x27,
	0x62, 0x1d, 0xf2, 0x29, 0x84, 0xcb, 0xac, 0xe4, 0x79, 0xf6, 0x9b, 0x48, 0xe8, 0x53, 0x44, 0xf6,
	0x01, 0x83, 0x56, 0x8b, 0x95, 0x28, 0xf8, 0xad, 0xda, 0x52, 0x62, 0xd1, 0x36, 0x60, 0xde, 0xfe,
	0x2e, 0xd3, 0x2b, 0xfa, 0x6c, 0xe2, 0x4d, 0x87, 0x0c, 0xed, 0xe8, 0x9f, 0xae, 0x25, 0x50, 0x33,
	0x25, 0x73, 0x2b, 0x7e, 0x0e, 0x39, 0x14, 0x30, 0xeb, 0x90, 0xcf, 0x00, 0xb0, 0x8f, 0xeb, 0xb2,
	0x14, 0xaa, 0x61, 0x93, 0x13, 0x71, 0x49, 0xd2, 0xfd, 0x4f, 0x92, 0x7c, 0x01, 0xc1, 0x42, 0xe6,
	0xd7, 0x65, 0x22, 0xee, 0x69, 0x0f, 0x33, 0x01, 0x33, 0x7f, 0xda, 0x5c, 0x97, 0x9a, 0xb5, 0x18,
	0xf9, 0x0a, 0xc2, 0x8f, 0x32, 0x2b, 0xcd, 0x6c, 0x77, 0xbc, 0x7b, 0x38, 0xee, 0x3d, 0xec, 0x08,
	0xac, 0x7f, 0x52, 0x8a, 0x56, 0x60, 0x8d, 0x1a, 0xce, 0x1e, 0xa8, 0xa1, 0xe4, 0x85, 0x65, 0x5e,
	0xc8, 0xd0, 0xde, 0x4f, 0x30, 0x74, 0x27, 0x38, 0x82, 0x8e, 0x5c, 0x53, 0xc0, 0x59, 0x77, 0xe4,
	0x9a, 0x4c, 0x60, 0x90, 0x8b, 0xa5, 0xfe, 0x59, 0xb1, 0x2c, 0x5d, 0x69, 0x3a, 0x40, 0xc0, 0x0d,
	0x19, 0x55, 0x99, 0x22, 0x7f, 0xd9, 0xae, 0x45, 0x43, 0x9d, 0xd6, 0x27, 0x53, 0x8b, 0xfd, 0x70,
	0xbf, 0x56, 0xc8, 0x9f, 0xc3, 0xf6, 0x5a, 0x94, 0x7c, 0x03, 0x41, 0x55, 0xc7, 0xef, 0x6b, 0xa1,
	0xb6, 0x48, 0xa9, 0x63, 0xfd, 0xb5, 0x19, 0xe6, 0xce, 0x4a, 0x88, 0x1b, 0x1e, 0xe7, 0x02, 0x59,
	0x16, 0xb0, 0xd6, 0x8f, 0x56, 0x00, 0x7b, 0x51, 0x35, 0xfd, 0x78, 0x6d, 0x3f, 0xa7, 0xd7, 0xd4,
	0xe1, 0x2b, 0x4e, 0xa0, 0x87, 0x75, 0x77, 0x8f, 0xd4, 0x8d, 0x48, 0xf4, 0xbb, 0x07, 0x43, 0x97,
	0xd7, 0x0f, 0x16, 0x8c, 0x77, 0xb0, 0x60, 0x5a, 0xc6, 0x75, 0x5c, 0xc6, 0x5d, 0x20, 0x51, 0xde,
	0xf1, 0x42, 0x58, 0x4a, 0x85, 0xac, 0xf5, 0xc9, 0xb7, 0x7b, 0xb6, 0x59, 0x0e, 0x3d, 0xc3, 0x5a,
	0x99, 0xa8, 0xea, 0x5c, 0x3f, 0xe2, 0x5c, 0xf4, 0xa7, 0x07, 0xa3, 0x87, 0xd8, 0x09, 0x96, 0xef,
	0xc8, 0xd0, 0x71, 0xc8, 0xf0, 0x1c, 0xfa, 0x0b, 0x99, 0xcf, 0x65, 0x85, 0xed, 0xfa, 0xac, 0xf1,
	0xc8, 0x4b, 0x8c, 0xd7, 0xc5, 0x6e, 0x4f, 0x1f, 0x10, 0xbe, 0x01, 0xdb, 0x6d, 0xeb, 0x3b, 0xdb,
	0x76, 0x04, 0x1d, 0x5e, 0x21, 0x57, 0x43, 0xd6, 0xe1, 0x95, 0x11, 0xed, 0x86, 0xe7, 0xb5, 0x40,
	0xa2, 0x9c, 0xe1, 0x2d, 0xfb, 0x40, 0xf4, 0x39, 0xf8, 0x28, 0x0e, 0x32, 0x04, 0xef, 0xa6, 0xd9,
	0xec, 0xde, 0x8d, 0xf1, 0x36, 0x58, 0xa8, 0xcf, 0xbc, 0x4d, 0xf4, 0x77, 0x17, 0x82, 0xb6, 0xb9,
	0x09, 0x0c, 0xec, 0xa4, 0xde, 0xd7, 0x52, 0x0b, 0x3c, 0x32, 0x64, 0x6e, 0xc8, 0x64, 0xf0, 0x0a,
	0xcd, 0xab, 0xad, 0xb6, 0xfd, 0x0e, 0x99, 0x1b, 0x32, 0x82, 0x97, 0x2a, 0x4b, 0xcd, 0xb3, 0xbc,
	0xb6, 0xad, 0x87, 0xcc, 0x89, 0x98, 0xbe, 0x0c, 0xd5, 0xb1, 0xf9, 0x90, 0xa1, 0x6d, 0x1e, 0x55,
	0xa1, 0x16, 0x7c, 0xab, 0x1b, 0x74, 0xcc, 0x5d, 0x6b, 0xae, 0x44, 0xa9, 0xad, 0xe8, 0xfb, 0x56,
	0x27, 0x4e, 0x08, 0x17, 0x1d, 0x62, 0xb6, 0x77, 0xeb, 0xec, 0xbb, 0xb0, 0xe7, 0x02, 0x7b, 0xce,
	0x09, 0xed, 0x33, 0x7e, 0xcc, 0x44, 0x9e, 0x34, 0x6a, 0x75, 0x43, 0xcd, 0x4b, 0x0f, 0xda, 0x97,
	0xa6, 0x86, 0x38, 0x85, 0xf9, 0x05, 0x47, 0x41, 0x86, 0x6c, 0xe7, 0x9a, 0x1a, 0x70, 0xdd, 0xa3,
	0x18, 0x43, 0x66, 0x9d, 0x76, 0x7a, 0x23, 0x67, 0x7a, 0x63, 0xe8, 0xf2, 0x34, 0x6d, 0xc4, 0x65,
	0xcc, 0x56, 0x0f, 0xe3, 0x53, 0x7a, 0x20, 0x11, 0xf8, 0x6f, 0x6b, 0xae, 0xec, 0xc2, 0x3e, 0x4c,
	0xb1, 0x50, 0xf4, 0x16, 0xce, 0xdf, 0xc8, 0xa2, 0xe0, 0x65, 0xe2, 0x0c, 0xd2, 0x7e, 0xd8, 0x3b,
	0xf9, 0xe1, 0x23, 0x8c, 0x8d, 0xfb, 0xf8, 0x9f, 0xe5, 0xfb, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x69, 0x20, 0x59, 0x68, 0xf2, 0x08, 0x00, 0x00,
}
