syntax = "proto3";

package schema;

// protoc --go_out=. *.proto


//import "github.com/araddon/qlbridge/rel/sql.proto";
//import "github.com/araddon/qlbridge/expr/node.proto";

//import "google/protobuf/any.proto";

// Partition describes a range of data (in a Table).
// left-key is contained in this partition
// right key is not contained in this partition, in the next partition.
// So any value >= left-key, and < right-key is contained herein.
message TablePartition {
	string      table = 1;
	repeated string      keys = 2;
	repeated Partition partitions = 3;
}



// Partition describes a range of data
// the left-key is contained in this partition
// the right key is not contained in this partition, in the next one
message Partition {
	string      id = 1;
	string      left = 2;
	string      right = 3;
}

message TablePb {
	// Name of table lowercased
	string name = 1;
	// Name of table (not lowercased)
	string nameOriginal = 2;
	// some dbs are more hiearchical (table-column-family)
	string parent = 3;
	// Character set, default = utf8
	uint32 Charset = 4;
	// Partitions in this table, optional may be empty
	TablePartition partition = 5;
	// Partition Count
	uint32 PartitionCt = 6;
	// List of indexes for this table
	repeated Index indexes = 7;
	// context json bytes
	bytes contextJson = 8;
	// List of Fields, in order
	repeated FieldPb fieldpbs = 9;
}

message FieldPb {
	string      name = 1;
	string      description = 2;
	string      key = 3;
	string      extra = 4;
	string      data = 5;
	uint32      length = 6;
	uint32      type = 7;
	uint32      nativeType = 8;
	uint64      defLength = 9;
	bytes       defVal = 11;
	bool        indexed = 13;
	bool        noNulls = 14;
	string      collation = 15;
	repeated string roles = 16;
	repeated Index indexes = 17;
	bytes    contextJson = 18;
}

// Index a description of how field(s) should be indexed for a table.
message Index {
	string name = 1;
	repeated string fields = 2;
	bool primaryKey = 3;
	repeated string hashPartition = 4;
	int32 partitionSize = 5;
}

/*
	// Field Describes the column info, name, data type, defaults, index, null
	// - dialects (mysql, mongo, cassandra) have their own descriptors for these,
	//   so this is generic meant to be converted to Frontend at runtime
	Field struct {
		idx                uint64                 // Positional index in array of fields
		row                []driver.Value         // memoized values of this fields descriptors for describe
		Name               string                 // Column Name
		Description        string                 // Comment/Description
		Key                string                 // Key info (primary, etc) should be stored in indexes
		Extra              string                 // no idea difference with Description
		Data               FieldData              // Pre-generated dialect specific data???
		Length             uint32                 // field-size, ie varchar(20)
		Type               value.ValueType        // wire & stored type (often string, text, blob, []bytes for protobuf, json)
		NativeType         value.ValueType        // Native type for contents of stored type if stored as bytes but is json map[string]date etc
		DefaultValueLength uint64                 // Default Value byte size for storage.
		DefaultValue       driver.Value           // Default value
		Indexed            bool                   // Is this indexed, if so we will have a list of indexes
		NoNulls            bool                   // Do we allow nulls?  default = false = yes allow nulls
		Collation          string                 // ie, utf8, none
		Roles              []string               // ie, {select,insert,update,delete}
		Indexes            []*Index               // Indexes this participates in
		Context            map[string]interface{} // During schema discovery of underlying source, may need to store additional info
	}
*/